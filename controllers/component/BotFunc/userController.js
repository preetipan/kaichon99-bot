const axios = require("axios");
require("dotenv").config();
const { channelAccessToken } = require("../../../config");
const { checkUserPlay ,checkPreviousRoundStatus} = require("../BotFunc/playController");

// ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
async function getUserRole(userId) {
  try {
    const response = await axios.get(
      `${process.env.API_URL}/user/${userId}/role`
    );
    return response;
  } catch (error) {
    return "User";
  }
}

//‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
async function getUserMoney(event, userId, member) {
  try {
    const response = await axios.get(`${process.env.API_URL}/user/${userId}`);
    const { id, fund } = response.data || {};
    const userName = member.displayName || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ";
    const userPictureUrl =
      member.pictureUrl || "https://example.com/default-profile.png";
    const formattedFund = fund.toLocaleString("en-US");

    const userPlay = await checkUserPlay(event);
    let latestPlay = null;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userPlay ‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // if (Array.isArray(userPlay) && userPlay.length > 0) {
    //   latestPlay = userPlay.reduce((latest, current) => {
    //     return new Date(current.createDate) > new Date(latest.createDate) ? current : latest;
    //   }, userPlay[0]);
    // }
    if (Array.isArray(userPlay) && userPlay.length > 0) {
      latestPlay = userPlay.reduce((latest, current) => {
        return current.id > latest.id ? current : latest;
      }, userPlay[0]);
    }

    const isOpenMainStatus = await checkPreviousRoundStatus();

    if (latestPlay && isOpenMainStatus) {
      return {
        type: "flex",
        altText: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á ${userName}`,
        contents: {
          type: "bubble",
          size: "giga",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "box",
                layout: "horizontal",
                contents: [
                  {
                    type: "image",
                    url: userPictureUrl,
                    size: "sm",
                    aspectRatio: "1:1",
                    aspectMode: "cover",
                    margin: "sm",
                    flex: 1,
                  },
                  {
                    type: "box",
                    layout: "vertical",
                    contents: [
                      {
                        type: "text",
                        text: `‡∏£‡∏´‡∏±‡∏™ ${id} ${userName}`,
                        weight: "bold",
                        size: "lg",
                        align: "center",
                        wrap: false,
                      },
                      ...userPlay.map((play) => ({
                        type: "box",
                        layout: "horizontal",
                        contents: [
                          {
                            type: "text",
                            text: `‡∏¢‡∏Å‡∏ó‡∏µ‡πà ${play.subRound.numberRound} ${play.subRound.price}`,
                            weight: "bold",
                            margin: "sm",
                            size: "sm",
                            align: "start",
                            wrap: false,
                            color: "#FFFFFF",
                          },
                          {
                            type: "text",
                            text: `${play.betAmount}`,
                            weight: "bold",
                            margin: "sm",
                            size: "sm",
                            align: "end",
                            wrap: false,
                            color: "#FFFFFF",
                          },
                        ],
                        alignItems: "center",
                        backgroundColor: play.betType === 'BLUE' ? '#3399FF' : (play.betType === 'RED' ? '#fc0000' : '#FFFFFF'),
                        cornerRadius: "0px",
                        margin: "sm",
                      })),
                      {
                        type: "text",
                        text: `‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ${latestPlay.balance}`,
                        weight: "bold",
                        color: "#00FF00",
                        size: "sm",
                        align: "end",
                        margin: "md",
                        wrap: false,
                      },
                    ],
                    flex: 2,
                  },
                ],
                paddingAll: "15px",
                backgroundColor: "#FFFFFF",
                cornerRadius: "5px",
              },
              {
                type: "box",
                layout: "horizontal",
                contents: [
                  {
                    type: "box",
                    layout: "vertical",
                    contents: [
                      {
                        type: "text",
                        text: `‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${formattedFund} üí∞`,
                        weight: "bold",
                        size: "md",
                        align: "end",
                        wrap: false,
                      },
                    ],
                  },
                ],
                paddingAll: "15px",
                backgroundColor: "#FFFFFF",
                cornerRadius: "5px",
              },
            ],
          },
        },
      };
    } else {
      return {
        type: "flex",
        altText: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á ${userName}`,
        contents: {
          type: "bubble",
          size: "giga",
          body: {
            type: "box",
            layout: "horizontal",
            contents: [
              {
                type: "image",
                url: userPictureUrl,
                size: "sm",
                aspectRatio: "1:1",
                aspectMode: "cover",
                margin: "sm",
                flex: 1,
              },
              {
                type: "box",
                layout: "vertical",
                contents: [
                  {
                    type: "text",
                    text: `‡∏£‡∏´‡∏±‡∏™ ${id} ${userName}`,
                    weight: "bold",
                    size: "lg",
                    align: "center",
                    wrap: false,
                  },
                  {
                    type: "text",
                    text: `‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formattedFund} üí∞`,
                    weight: "bold",
                    size: "md",
                    margin: "md",
                    align: "center",
                    wrap: false,
                  },
                ],
                flex: 2,
              },
            ],
            paddingAll: "15px",
            backgroundColor: "#FFFFFF",
            cornerRadius: "5px",
          },
        },
      };
    }
  } catch (error) {
    console.error(
      "Error fetching user money:",
      error.response?.data || error.message
    );
    return {
      type: "text",
      text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function checkIfUserExists(userId) {
  try {
    const response = await axios.get(`${process.env.API_URL}/user/${userId}`);
    if (response.data) {
      return true;
    }
    return false;
  } catch (error) {
    return false;
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
async function AddMember(member, userId, groupId) {
  try {
    const response = await axios.post(`${process.env.API_URL}/user`, {
      userID: userId,
      status: 1,
      role: 3,
      fund: 0,
      remaining_fund: 0,
      dailyCashback: 0,
      statusFund: 1,
      isActive: true,
      groupId: groupId,
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 201 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (response.status === 201) {
      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 201 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ API ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      //console.log(`User ${userId} added successfully:`, response.data);
    } else {
      // ‡∏´‡∏≤‡∏Å API ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 201 ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
      const errorMessage = response.data?.message || "Unknown error";
      throw new Error(`API Error: ${response.status} - ${errorMessage}`);
    }
  } catch (error) {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
    console.error(
      "Error sending user to API:",
      error.response?.data || error.message
    );

    // ‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    const errorMsg =
      error.response?.data?.message ||
      error.message ||
      "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ";
    throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}: ${errorMsg}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
async function updateMemberData(userId, groupId, { status = false }) {
  try {
    const response = await axios.patch(
      `${process.env.API_URL}/user/${userId}`,
      {
        groupId: groupId, // ‡πÉ‡∏ä‡πâ groupId ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        isActive: status,
      }
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
    if (response.status === 200 || response.status === 204) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 204 ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ
      console.log(`User ${userId} data updated successfully:`, response.data);
    } else {
      console.error(
        `Failed to update data for User ${userId}:`,
        response.status,
        response.data
      );
    }
  } catch (error) {
    console.error(
      "Error updating member data:",
      error.response?.data || error.message
    );
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin
async function updateAdminData(userId, groupId, { role }) {
  try {
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const response = await axios.patch(
      `${process.env.API_URL}/user/${userId}`,
      {
        groupId: groupId,
        role: role,
      }
    );

    console.log(`response : `, response);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
    if (response.status === 200 && response.data) {
      console.log(`User ${userId} data updated:`, response.data);
      return { success: true, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß" };
    } else {
      console.error(
        `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}:`,
        response.status,
        response.data
      );
      return {
        success: false,
        message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ. ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á`,
      };
    }
  } catch (error) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î exception
    console.error(
      "Error updating member data:",
      error.response?.data || error.message
    );
    return { success: false, message: error.response?.data || error.message };
  }
}


//‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
async function checkUserData(userId) {
  try {
    if (!process.env.API_URL) {
      throw new Error("API_URL is not defined in .env");
    }

    const response = await axios.get(`${process.env.API_URL}/user/${userId}`);
    return response.data;
  } catch (error) {
    console.error(
      "Error checking openPlayInday:",
      error.response?.data || error.message
    );
  }
}


//‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ by id
async function checkUserDataByID(id) {
  try {
    if (!process.env.API_URL) {
      throw new Error("API_URL is not defined in .env");
    }

    const response = await axios.get(`${process.env.API_URL}/user/id/${id}`);
    return response.data;
  } catch (error) {
    console.error(
      "Error checking openPlayInday:",
      error.response?.data || error.message
    );
  }
}


async function getUserCheckMoney(event) {
  try {
    const userId = event.source.userId;
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    const response = await axios.get(`${process.env.API_URL}/user/${userId}`);
    const { id, fund } = response.data || {};
    const formattedFund = fund ? fund.toLocaleString("en-US") : "0";

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE Messaging API
    const profileResponse = await axios.get(
      `https://api.line.me/v2/bot/profile/${userId}`,
      {
        headers: {
          Authorization: `Bearer ${channelAccessToken}`,
        },
      }
    );

    const { displayName, pictureUrl } = profileResponse.data || {};
    const userName = displayName || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ";
    const userPictureUrl = pictureUrl || "https://example.com/default-profile.png";

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Flex Message
    return {
      type: "flex",
      altText: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á ${userName}`,
      contents: {
        type: "bubble",
        size: "giga",
        body: {
          type: "box",
          layout: "horizontal",
          contents: [
            {
              type: "image",
              url: userPictureUrl,
              size: "sm",
              aspectRatio: "1:1",
              aspectMode: "cover",
              margin: "sm",
              flex: 1,
            },
            {
              type: "box",
              layout: "vertical",
              contents: [
                {
                  type: "text",
                  text: `‡∏£‡∏´‡∏±‡∏™ ${id} ) ${displayName}`,
                  weight: "bold",
                  size: "xl",
                  align: "center",
                  gravity: "center",
                  wrap: false,
                },
                
              ],
              flex: 2,
              justifyContent: "center",
              alignItems: "center",
            },
          ],
          paddingAll: "10px",
          backgroundColor: "#FFFFFF",
          cornerRadius: "5px",
        },
      },
    };
  } catch (error) {
    console.error("Error fetching user money:", error.response?.data || error.message);
    return {
      type: "text",
      text: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
    };
  }
}

module.exports = {
  AddMember,
  checkIfUserExists,
  updateMemberData,
  getUserRole,
  getUserMoney,
  updateAdminData,
  checkUserData,
  checkUserDataByID,
  getUserCheckMoney,
};
